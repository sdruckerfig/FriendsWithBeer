/*
 * File: app/controller/Friends.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.1.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('FriendsWithBeer.controller.Friends', {
    extend: 'Ext.app.Controller',

    config: {
        models: [
            'Friend'
        ],
        stores: [
            'Friends',
            'Excuses'
        ],
        views: [
            'friends.Detail'
        ],

        refs: {
            friendsView: 'tabpanel > #friends',
            btnAddFriend: 'button#btnAddFriend',
            btnBackToFriendList: 'button#btnBackToFriendList ',
            friendForm: 'formpanel#friendForm'
        },

        control: {
            "beerfriendslist": {
                activate: 'onBeerFriendsListActivate'
            },
            "btnAddFriend": {
                tap: 'onBtnAddFriendTap'
            },
            "button#btnSaveContact": {
                tap: 'onBtnSaveContactTap'
            },
            "list#friendsList": {
                itemtap: 'onFriendsListItemTap'
            },
            "button#btnDeleteContact": {
                tap: 'onBtnDeleteContactTap'
            },
            "button#btnGeoCode": {
                tap: 'onBtnGeoCodeTap'
            },
            "container#friendrandomizer": {
                activate: 'onFriendrandomizerActivate'
            },
            "button#btnBackToFriendList": {
                tap: 'onBtnBackToFriendListTap'
            }
        }
    },

    onBeerFriendsListActivate: function(container, newActiveItem, oldActiveItem, options) {
        this.calcDistances();
    },

    onBtnAddFriendTap: function(button, e, options) {
        this.getFriendForm().setRecord(
        Ext.create('FriendsWithBeer.model.Friend')
        );
        this.getFriendForm().reset();
        this.onGoToForm();

    },

    onBtnSaveContactTap: function(button, e, options) {
        // update model instance with data from form
        var form = button.up('formpanel');
        var rec = form.getRecord();
        rec.set(form.getValues());

        // validate model
        var errors = rec.validate();

        if (!errors.isValid()) {
            // at least one error occurred
            var errorMsg = "";
            console.log(errors);
            errors.each(function (errorObj) {
                errorMsg += errorObj.getField() + " " + errorObj.getMessage() + "<br>"; 
            });
            Ext.Msg.alert("Doh!", errorMsg);
        } else {
            // check to see if new record
            if (rec.phantom) {
                Ext.getStore('Friends').add(rec);
            } 
            // commit changes  
            Ext.getStore('Friends').sync();
            this.onGoToList();
        }
    },

    onFriendsListItemTap: function(dataview, index, target, record, e, options) {
        this.getFriendForm().setRecord(record);
        this.onGoToForm();

    },

    onBtnDeleteContactTap: function(button, e, options) {
        var rec = this.getFriendForm().getRecord();
        if (!rec.phantom) {
            Ext.getStore('Friends').remove(rec);
        }
        Ext.getStore('Friends').sync();
        this.onGoToList();
    },

    onBtnGeoCodeTap: function(button, e, options) {

        Ext.Viewport.setMasked({xtype:'loadmask', message:'Please Wait...'});

        var formPanel =  this.getFriendForm();
        var formvalues = formPanel.getValues();
        var address = formvalues.address + " " + formvalues.zip;
        var geocoder = new google.maps.Geocoder();


        geocoder.geocode({ 'address': address }, function(results, status) {
        if (status == "OK") {
            formPanel.down("textfield[name=lat]").setValue(results[0].geometry.location.lat());
            formPanel.down("textfield[name=lng]").setValue(results[0].geometry.location.lng());  
        }
        Ext.Viewport.setMasked(false);
    });
    },

    onFriendrandomizerActivate: function(container, newActiveItem, oldActiveItem, options) {

        this.calcDistances(function() {
            var estore, 
            fstore, 
            itemNumber, 
            currentExcuse="", 
            currentFriend;

            container.removeAll(false);

            eStore = Ext.getStore('Excuses');
            if (eStore.getCount() > 0) {
                itemNumber = Math.floor(Math.random() * (eStore.getCount()));
                currentExcuse = eStore.getAt(itemNumber).get("EXCUSE");
            }

            fstore = Ext.getStore('Friends');
            if (fstore.getCount() === 0) {
                Ext.Msg.alert("Error","You must add friends before using this feature.");   
            } else {
                itemNumber =  Math.floor(Math.random() * (fstore.getCount()));
                currentFriend = fstore.getAt(itemNumber);

                container.add({
                    xtype: 'friendsdetail',
                    rec: currentFriend,
                    excuse: currentExcuse
                });
            }


        }, this);

    },

    onBtnBackToFriendListTap: function(button, e, options) {
        this.onGoToList();
    },

    onGoToForm: function() {
        // hide add button
        this.getBtnAddFriend().setHidden(true);
        // show "back" button
        this.getBtnBackToFriendList().setHidden(false);
        // toggle the view
        this.getFriendsView().setActiveItem(1);
    },

    onGoToList: function() {
        // show add button
        this.getBtnAddFriend().setHidden(false);
        // hide back button
        this.getBtnBackToFriendList().setHidden(true);
        // toggle visability of the list view
        this.getFriendsView().setActiveItem(0);
    },

    calcDistance: function(lat1,lng1,lat2,lng2) {

        var R = 3959; // use 3959 for miles or 6371 for km
        var dLat = (lat2-lat1) * Math.PI / 180 ;
        var dLon = (lng2-lng1)* Math.PI / 180;

        lat1 = lat1 * Math.PI / 180;
        lat2 = lat2 * Math.PI / 180;

        var a = Math.sin(dLat/2) * Math.sin(dLat/2) + Math.sin(dLon/2) * Math.sin(dLon/2) * Math.cos(lat1) * Math.cos(lat2); 
        var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); 

        return Ext.Number.toFixed(R * c,2); 


    },

    calcDistances: function(callback, scope) {
        Ext.Viewport.setMasked({
            xtype: 'loadmask' 
        });

        // preserve scope for callback
        var me=this;

        // get current position
        var geo = Ext.create('Ext.util.Geolocation', {
            autoUpdate: false,
            listeners: {
                locationupdate: function(geo) {
                    // calculate distance to target
                    var store = Ext.getStore('Friends');
                    store.each(function(item,index,length) {
                        item.set("distance",me.calcDistance(item.get("lat"),item.get("lng"), geo.getLatitude(),  geo.getLongitude()));
                    });
                    Ext.Viewport.setMasked(false);
                    console.log('distances calculated');
                    if (callback) {
                        callback.call(scope);
                    }
                },
                locationerror: function(geo, bTimeout, bPermissionDenied, bLocationUnavailable, message) {
                    Ext.Viewport.setMasked(false);
                    if(bTimeout){
                        Ext.Msg.alert('Aw, Snap!','Timeout occurred.');
                    } else {
                        Ext.Msg.alert('Aw, Snap!', 'An Error occurred.');
                    }
                }
            }
        });
        // run once
        geo.updateLocation();

    }

});